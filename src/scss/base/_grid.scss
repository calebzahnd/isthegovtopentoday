/**************/
/* Grid Mixins
/**************/

@function gutters($gutters: map-get($global-config, gutters)) {
	@return $gutters;
}

@mixin gutters($gutters: map-get($global-config, gutters)) {
	padding-left: gutters($gutters);
	padding-right: gutters($gutters);
}

@mixin block($width: map-get($global-config, block--width), $gutters: false, $color: white) {
	position: relative;
	width: 100%;
	max-width: $width;
	margin: 0 auto;
	@if ($gutters == true) {
		@include gutters();
	}
	@if ($color != inherit) {
		@include color($color, background-color);
	}
}

@mixin container($width: map-get($global-config, width), $flex: true, $padding: true) {
	position: relative;
	max-width: $width;
	margin: 0 auto;
	@if ($flex == true) {
		display: flex;
	}
	@if ($padding == true) {
		@include screen(md) {
			@include gutters(45px);
		}
	}
	@if ($flex == false) {
		@include clearfix();
	}

	//This is for the Chrome 12-column grid extension.
	#bootstrap-grid-frame-jhbsdovu & {
		display: block;
	}
}

//Use this to create a full-browser-width container when you are inside a limited-width parent, eg, inside of @mixin container()
@mixin container-breakout() {
	position: relative;
	width: 100vw;
	max-width: 100vw;
    left: 50%;
    right: 50%;
    margin-left: -50vw;
    margin-right: -50vw;
}

@function span($columns: map-get($global-config, columns), $container: map-get($global-config, columns)) {
	@return percentage($columns / $container);
}

@mixin span($columns: map-get($global-config, columns), $container: map-get($global-config, columns), $flex: true) {
	width: span($columns, $container);
	@if ($flex == false) {
		float: left;
	}
	@include gutters();
}

@mixin push($columns: map-get($global-config, columns), $container: map-get($global-config, columns)) {
	margin-left: span($columns, $container);
}

@mixin pull($columns: map-get($global-config, columns), $container: map-get($global-config, columns)) {
	margin-left: (span($columns, $container) * -1);
}